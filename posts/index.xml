<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Arkaprabha Chakraborty</title><link>/posts/</link><description>Arkaprabha Chakraborty (Posts)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>arkaprabhachakraborty2001@gmail.com
(Arkaprabha Chakraborty)</managingEditor><lastBuildDate>Sun, 06 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Peculiar Pentest Scenes - Client-side HTTP Encryption Folly</title><link>/blog/peculiar_pentest_scenes_1/</link><pubDate>Sun, 06 Oct 2024 00:00:00 +0000</pubDate><author>arkaprabhachakraborty2001@gmail.com (Arkaprabha Chakraborty)</author><guid>/blog/peculiar_pentest_scenes_1/</guid><description>&lt;p>Hello fellow researcher! Welcome to the &lt;em>&lt;strong>Chapter 1&lt;/strong>&lt;/em> of &lt;em>&lt;strong>Peculiar Pentest Scenes&lt;/strong>&lt;/em> series of blogs, where I take you through weird situations that I have encountered while being in different penetration testing engagements. In this post, I&amp;rsquo;m going to take you through &lt;strong>Client-side HTTP Encryption&lt;/strong> and it&amp;rsquo;s nuances, how easy it can be to exploit web and mobile applications implementing this &lt;em>feature&lt;/em>, and what are the possible &lt;em>right/correct&lt;/em> ways to do it.&lt;/p>
&lt;h2 id="what-is-client-side-http-encryption" >
&lt;div>
&lt;a href="#what-is-client-side-http-encryption">
#
&lt;/a>
What is Client-side HTTP Encryption?
&lt;/div>
&lt;/h2>
&lt;p>Before you start screaming, NO! It&amp;rsquo;s NOT SSL/TLS. NO! It&amp;rsquo;s not E2EE either. Client-side HTTP Encryption (also some researchers call it Application Layer Encryption) means sending and receiving encrypted HTTP requests and responses. Basically requests like POST, PUT, PATCH etc, or their data are sent in an encrypted and encoded wrap.&lt;/p>
&lt;h3 id="how-it-works" >
&lt;div>
&lt;a href="#how-it-works">
##
&lt;/a>
How it works?
&lt;/div>
&lt;/h3>
&lt;p>I have observed there are 2 broadly used ways in which Client-side HTTP Encryption works:&lt;/p>
&lt;ol>
&lt;li>Total Encapsulation: Encrypting and encapsulating an entire request, including methods and headers within a json.
&lt;img src="https://raw.githubusercontent.com/ArkaprabhaChakraborty/ArkaprabhaChakraborty.github.io/refs/heads/main/assets/Client-side-HTTP-Encryption/Total%20Encapsulation.png" alt="image">&lt;/li>
&lt;li>Request Body Encryption: Encrypting and encapsulating the body parameters of a request within a json.
&lt;img src="https://raw.githubusercontent.com/ArkaprabhaChakraborty/ArkaprabhaChakraborty.github.io/refs/heads/main/assets/Client-side-HTTP-Encryption/Request%20Body%20Encryption.png" alt="image">&lt;/li>
&lt;/ol>
&lt;p>This &lt;a href="https://unifiedid.com/docs/getting-started/gs-encryption-decryption">article&lt;/a> from Unified ID is a good explanation of how its works with an example implementation.&lt;/p>
&lt;h2 id="run-through" >
&lt;div>
&lt;a href="#run-through">
#
&lt;/a>
Run Through
&lt;/div>
&lt;/h2>
&lt;h3 id="background" >
&lt;div>
&lt;a href="#background">
##
&lt;/a>
Background
&lt;/div>
&lt;/h3>
&lt;p>I was performing a pentest engagement of a multi-platform application used by the employees of a bank. The application could be used as a web or an android application, which made it clear for me that the application backend was same for both. I started by connecting over their VPN and browsing the web application (after logging in with the credentials I was provided) through Burp and ZAP (in Attack mode). I find ZAP&amp;rsquo;s attack mode more useful as it rules out some of the basic test cases for me.&lt;/p>
&lt;blockquote>
&lt;p>PS a detailed run through is not possible because of &amp;ldquo;obvious reasons&amp;rdquo; but I have cherry picked the most interesting parts!&lt;/p>
&lt;/blockquote>
&lt;h3 id="initial-observation-and-hypothesis" >
&lt;div>
&lt;a href="#initial-observation-and-hypothesis">
##
&lt;/a>
Initial Observation and Hypothesis
&lt;/div>
&lt;/h3>
&lt;p>After a while I noticed certain requests, more specifically POST requests, having body in the following format:
&lt;img src="https://raw.githubusercontent.com/ArkaprabhaChakraborty/ArkaprabhaChakraborty.github.io/refs/heads/main/assets/Client-side-HTTP-Encryption/Original%20Request%20Response.png" alt="image">&lt;/p>
&lt;p>Clearly the request body was encrypted. Typically, this a good primary defense for mobile applications but for web applications implementing it can be a headache because of the nuances. One of the major ones is the IV being a constant throughout a session or worse being a complete constant just fetched through an async request.&lt;/p>
&lt;blockquote>
&lt;p>Trivia: An initialization vector (IV) is a random value used alongside a secret key for data encryption to help prevent cyber attacks. Also known as a nonce (number used once), this value is used only once per session, ensuring that a potential attacker cannot decrypt the message without authorization.&lt;/p>
&lt;/blockquote>
&lt;p>To confirm this hypothesis, I observed and compared same requests made at different times (after refreshing the browser) using both ZAP&amp;rsquo;s diff add-on and Burp&amp;rsquo;s comparer. Apart from the headers, the payloads were identical which meant the IV could be grabbed via some source code review and performing some really &lt;em>silly&lt;/em> overrides.&lt;/p>
&lt;p>Now it was time to find the encryption code in a huge 20,000+ lines minified javascript code. :)&lt;/p>
&lt;h3 id="a-breakthrough" >
&lt;div>
&lt;a href="#a-breakthrough">
##
&lt;/a>
A Breakthrough
&lt;/div>
&lt;/h3>
&lt;p>After searching through many lines of code using the phrase &amp;ldquo;encrypt&amp;rdquo; I stumbled across an interesting block at the very end of the minified mumbo-jumbo. It seemed like a block of code belonging to the library &lt;a href="https://www.npmjs.com/package/crypto-js">crypto-js&lt;/a>. All thanks to the beautiful readme provided by the library&amp;rsquo;s maintainers and the community, which had the exact same example implementation of an &lt;code>AES.encrypt()&lt;/code> block.&lt;/p>
&lt;p>Time for the chrome&amp;rsquo;s underrated feature: &lt;a href="https://developer.chrome.com/docs/devtools/overrides">Browser based overrides&lt;/a>! I have shown a simple example using my blog on how to perform an override.
&lt;img src="https://raw.githubusercontent.com/ArkaprabhaChakraborty/ArkaprabhaChakraborty.github.io/refs/heads/main/assets/Client-side-HTTP-Encryption/How%20to%20override.png" alt="image-showing-how-to-override">
I dropped in some &lt;code>console.log()&lt;/code> within the blocks like shown below to grab the internal working of the block.
&lt;img src="https://raw.githubusercontent.com/ArkaprabhaChakraborty/ArkaprabhaChakraborty.github.io/refs/heads/main/assets/Client-side-HTTP-Encryption/override.png" alt="image">&lt;/p>
&lt;p>Lo and behold I had the IV in my browser console. I verified it by calling the &lt;code>decrypt()&lt;/code> function (shown in the above screenshot) and passing the IV along with the &lt;code>encryptedRequest&lt;/code> value. It gave me back the decrypted request parameters being used. The code was basically using the same IV input as the key, or, vice-versa. Either way I now have a way to decrypt the requests.&lt;/p>
&lt;p>Now I just have to make a simple gadget in which I can put the IV and edit the requests or responses. I decided to reuse the code block from the minified code of the very web application being assessed to do this.&lt;/p>
&lt;p>&lt;em>&lt;strong>app.js&lt;/strong>&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">const&lt;/span> express &lt;span style="color:#ff6ac1">=&lt;/span> require(&lt;span style="color:#5af78e">&amp;#39;express&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">const&lt;/span> bodyParser &lt;span style="color:#ff6ac1">=&lt;/span> require(&lt;span style="color:#5af78e">&amp;#39;body-parser&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">const&lt;/span> cors &lt;span style="color:#ff6ac1">=&lt;/span> require(&lt;span style="color:#5af78e">&amp;#39;cors&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">const&lt;/span> nc &lt;span style="color:#ff6ac1">=&lt;/span> require(&lt;span style="color:#5af78e">&amp;#39;crypto-js&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">const&lt;/span> app &lt;span style="color:#ff6ac1">=&lt;/span> express();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">const&lt;/span> port &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff9f43">3000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(cors({ origin&lt;span style="color:#ff6ac1">:&lt;/span> &lt;span style="color:#5af78e">&amp;#39;*&amp;#39;&lt;/span> }));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(bodyParser.json());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.use(express.&lt;span style="color:#ff6ac1">static&lt;/span>(__dirname));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">class&lt;/span> Base64EncrypterDecrypter {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> encryptText(e, i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff5c57">let&lt;/span> n &lt;span style="color:#ff6ac1">=&lt;/span> nc.enc.Utf8.parse(i),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a &lt;span style="color:#ff6ac1">=&lt;/span> nc.enc.Utf8.parse(i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> nc.AES.encrypt(nc.enc.Utf8.parse(e.toString()), n, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> keySize&lt;span style="color:#ff6ac1">:&lt;/span> &lt;span style="color:#ff9f43">16&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iv&lt;span style="color:#ff6ac1">:&lt;/span> a,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mode&lt;span style="color:#ff6ac1">:&lt;/span> nc.mode.CBC,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> padding&lt;span style="color:#ff6ac1">:&lt;/span> nc.pad.Pkcs7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }).toString();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> decryptText(e, i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff5c57">let&lt;/span> n &lt;span style="color:#ff6ac1">=&lt;/span> nc.enc.Utf8.parse(i),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a &lt;span style="color:#ff6ac1">=&lt;/span> nc.enc.Utf8.parse(i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">return&lt;/span> nc.AES.decrypt(e, n, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> keySize&lt;span style="color:#ff6ac1">:&lt;/span> &lt;span style="color:#ff9f43">16&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iv&lt;span style="color:#ff6ac1">:&lt;/span> a,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mode&lt;span style="color:#ff6ac1">:&lt;/span> nc.mode.CBC,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> padding&lt;span style="color:#ff6ac1">:&lt;/span> nc.pad.Pkcs7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }).toString(nc.enc.Utf8);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">const&lt;/span> encrypterDecrypter &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff6ac1">new&lt;/span> Base64EncrypterDecrypter();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.post(&lt;span style="color:#5af78e">&amp;#39;/encrypt&amp;#39;&lt;/span>, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">const&lt;/span> { text, key } &lt;span style="color:#ff6ac1">=&lt;/span> req.body;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">const&lt;/span> encryptedText &lt;span style="color:#ff6ac1">=&lt;/span> encrypterDecrypter.encryptText(text, key);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.json({ encryptedText });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.post(&lt;span style="color:#5af78e">&amp;#39;/decrypt&amp;#39;&lt;/span>, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">const&lt;/span> { encryptedText, key } &lt;span style="color:#ff6ac1">=&lt;/span> req.body;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">const&lt;/span> decryptedText &lt;span style="color:#ff6ac1">=&lt;/span> encrypterDecrypter.decryptText(encryptedText, key);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.json({ decryptedText });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.get(&lt;span style="color:#5af78e">&amp;#39;/&amp;#39;&lt;/span>, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.sendFile(path.join(__dirname, &lt;span style="color:#5af78e">&amp;#39;/index.html&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app.listen(port, () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> console.log(&lt;span style="color:#5af78e">`Server is running on http://localhost:&lt;/span>&lt;span style="color:#5af78e">${&lt;/span>port&lt;span style="color:#5af78e">}&lt;/span>&lt;span style="color:#5af78e">`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>&lt;strong>index.html&lt;/strong>&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#78787e">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff6ac1">html&lt;/span> &lt;span style="color:#57c7ff">lang&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;en&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff6ac1">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">meta&lt;/span> &lt;span style="color:#57c7ff">charset&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;UTF-8&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">meta&lt;/span> &lt;span style="color:#57c7ff">name&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;viewport&amp;#34;&lt;/span> &lt;span style="color:#57c7ff">content&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">title&lt;/span>&amp;gt;Encryption and Decryption&amp;lt;/&lt;span style="color:#ff6ac1">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">style&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">body&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">font-family&lt;/span>: Arial, &lt;span style="color:#ff6ac1">sans-serif&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">margin&lt;/span>: &lt;span style="color:#ff9f43">20&lt;/span>&lt;span style="color:#9aedfe">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">background-color&lt;/span>: &lt;span style="color:#ff9f43">#f4f4f4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">h1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">text-align&lt;/span>: &lt;span style="color:#ff6ac1">center&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">color&lt;/span>: &lt;span style="color:#ff9f43">#333&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">form&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">margin-bottom&lt;/span>: &lt;span style="color:#ff9f43">20&lt;/span>&lt;span style="color:#9aedfe">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">background-color&lt;/span>: &lt;span style="color:#ff9f43">#fff&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">padding&lt;/span>: &lt;span style="color:#ff9f43">20&lt;/span>&lt;span style="color:#9aedfe">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">border-radius&lt;/span>: &lt;span style="color:#ff9f43">8&lt;/span>&lt;span style="color:#9aedfe">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">box-shadow&lt;/span>: &lt;span style="color:#ff9f43">0&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span> &lt;span style="color:#ff9f43">10&lt;/span>&lt;span style="color:#9aedfe">px&lt;/span> &lt;span style="color:#ff5c57">rgba&lt;/span>(&lt;span style="color:#ff9f43">0&lt;/span>, &lt;span style="color:#ff9f43">0&lt;/span>, &lt;span style="color:#ff9f43">0&lt;/span>, &lt;span style="color:#ff9f43">0.1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">label&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">display&lt;/span>: &lt;span style="color:#ff6ac1">block&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">margin-bottom&lt;/span>: &lt;span style="color:#ff9f43">10&lt;/span>&lt;span style="color:#9aedfe">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">input&lt;/span>&lt;span style="color:#ff6ac1">,&lt;/span> &lt;span style="color:#ff6ac1">textarea&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">width&lt;/span>: &lt;span style="color:#ff9f43">100&lt;/span>&lt;span style="color:#9aedfe">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">padding&lt;/span>: &lt;span style="color:#ff9f43">10&lt;/span>&lt;span style="color:#9aedfe">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">margin-bottom&lt;/span>: &lt;span style="color:#ff9f43">15&lt;/span>&lt;span style="color:#9aedfe">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">box-sizing&lt;/span>: &lt;span style="color:#ff6ac1">border-box&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">button&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">background-color&lt;/span>: &lt;span style="color:#ff9f43">#4CAF50&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">color&lt;/span>: &lt;span style="color:#ff6ac1">white&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">padding&lt;/span>: &lt;span style="color:#ff9f43">10&lt;/span>&lt;span style="color:#9aedfe">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">border&lt;/span>: &lt;span style="color:#ff6ac1">none&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">cursor&lt;/span>: &lt;span style="color:#ff6ac1">pointer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">button&lt;/span>:&lt;span style="color:#ff9f43">hover&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">background-color&lt;/span>: &lt;span style="color:#ff9f43">#45a049&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#f3f99d">result-container&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">margin-top&lt;/span>: &lt;span style="color:#ff9f43">20&lt;/span>&lt;span style="color:#9aedfe">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">padding&lt;/span>: &lt;span style="color:#ff9f43">20&lt;/span>&lt;span style="color:#9aedfe">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">background-color&lt;/span>: &lt;span style="color:#ff9f43">#fff&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">border-radius&lt;/span>: &lt;span style="color:#ff9f43">8&lt;/span>&lt;span style="color:#9aedfe">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">box-shadow&lt;/span>: &lt;span style="color:#ff9f43">0&lt;/span> &lt;span style="color:#ff9f43">0&lt;/span> &lt;span style="color:#ff9f43">10&lt;/span>&lt;span style="color:#9aedfe">px&lt;/span> &lt;span style="color:#ff5c57">rgba&lt;/span>(&lt;span style="color:#ff9f43">0&lt;/span>, &lt;span style="color:#ff9f43">0&lt;/span>, &lt;span style="color:#ff9f43">0&lt;/span>, &lt;span style="color:#ff9f43">0.1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">overflow&lt;/span>: &lt;span style="color:#ff6ac1">hidden&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">word-wrap&lt;/span>: &lt;span style="color:#ff6ac1">break-word&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">textarea&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">height&lt;/span>: &lt;span style="color:#ff9f43">150&lt;/span>&lt;span style="color:#9aedfe">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">resize&lt;/span>: &lt;span style="color:#ff6ac1">none&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#ff6ac1">style&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff6ac1">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#ff6ac1">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">h1&lt;/span>&amp;gt;Encryption and Decryption&amp;lt;/&lt;span style="color:#ff6ac1">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">form&lt;/span> &lt;span style="color:#57c7ff">id&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;encryptionForm&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">label&lt;/span> &lt;span style="color:#57c7ff">for&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;text&amp;#34;&lt;/span>&amp;gt;Text:&amp;lt;/&lt;span style="color:#ff6ac1">label&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">textarea&lt;/span> &lt;span style="color:#57c7ff">id&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;plainText&amp;#34;&lt;/span> &lt;span style="color:#57c7ff">name&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;plainText&amp;#34;&lt;/span> &lt;span style="color:#57c7ff">required&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#ff6ac1">textarea&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">br&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">label&lt;/span> &lt;span style="color:#57c7ff">for&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;encryptionKey&amp;#34;&lt;/span>&amp;gt;Key:&amp;lt;/&lt;span style="color:#ff6ac1">label&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">input&lt;/span> &lt;span style="color:#57c7ff">type&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#57c7ff">id&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;encryptionKey&amp;#34;&lt;/span> &lt;span style="color:#57c7ff">name&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;encryptionKey&amp;#34;&lt;/span> &lt;span style="color:#57c7ff">value&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;5fc6801bada241b3&amp;#34;&lt;/span> &lt;span style="color:#57c7ff">required&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">br&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">button&lt;/span> &lt;span style="color:#57c7ff">type&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;button&amp;#34;&lt;/span> &lt;span style="color:#57c7ff">onclick&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;encrypt()&amp;#34;&lt;/span>&amp;gt;Encrypt&amp;lt;/&lt;span style="color:#ff6ac1">button&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#ff6ac1">form&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">strong&lt;/span>&amp;gt;Result&amp;lt;/&lt;span style="color:#ff6ac1">strong&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">div&lt;/span> &lt;span style="color:#57c7ff">id&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;encryptionResult&amp;#34;&lt;/span> &lt;span style="color:#57c7ff">class&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;result-container&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#ff6ac1">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">br&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">form&lt;/span> &lt;span style="color:#57c7ff">id&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;decryptionForm&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">label&lt;/span> &lt;span style="color:#57c7ff">for&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;encryptedText&amp;#34;&lt;/span>&amp;gt;Encrypted Text:&amp;lt;/&lt;span style="color:#ff6ac1">label&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">textarea&lt;/span> &lt;span style="color:#57c7ff">id&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;encryptedText&amp;#34;&lt;/span> &lt;span style="color:#57c7ff">name&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;encryptedText&amp;#34;&lt;/span> &lt;span style="color:#57c7ff">required&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#ff6ac1">textarea&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">br&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">label&lt;/span> &lt;span style="color:#57c7ff">for&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;decryptionKey&amp;#34;&lt;/span>&amp;gt;Key:&amp;lt;/&lt;span style="color:#ff6ac1">label&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">input&lt;/span> &lt;span style="color:#57c7ff">type&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#57c7ff">id&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;decryptionKey&amp;#34;&lt;/span> &lt;span style="color:#57c7ff">name&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;decryptionKey&amp;#34;&lt;/span> &lt;span style="color:#57c7ff">value&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;4fc6901baka341c5&amp;#34;&lt;/span> &lt;span style="color:#57c7ff">required&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">br&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">button&lt;/span> &lt;span style="color:#57c7ff">type&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;button&amp;#34;&lt;/span> &lt;span style="color:#57c7ff">onclick&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;decrypt()&amp;#34;&lt;/span>&amp;gt;Decrypt&amp;lt;/&lt;span style="color:#ff6ac1">button&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#ff6ac1">form&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">strong&lt;/span>&amp;gt; Result &amp;lt;/&lt;span style="color:#ff6ac1">strong&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">div&lt;/span> &lt;span style="color:#57c7ff">id&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;decryptionResult&amp;#34;&lt;/span> &lt;span style="color:#57c7ff">class&lt;/span>&lt;span style="color:#ff6ac1">=&lt;/span>&lt;span style="color:#5af78e">&amp;#34;result-container&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#ff6ac1">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#ff6ac1">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">async&lt;/span> &lt;span style="color:#ff5c57">function&lt;/span> encrypt() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">const&lt;/span> text &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff5c57">document&lt;/span>.getElementById(&lt;span style="color:#5af78e">&amp;#39;plainText&amp;#39;&lt;/span>).value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">const&lt;/span> key &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff5c57">document&lt;/span>.getElementById(&lt;span style="color:#5af78e">&amp;#39;encryptionKey&amp;#39;&lt;/span>).value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">const&lt;/span> response &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff6ac1">await&lt;/span> fetch(&lt;span style="color:#5af78e">&amp;#39;http://localhost:3000/encrypt&amp;#39;&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> method&lt;span style="color:#ff6ac1">:&lt;/span> &lt;span style="color:#5af78e">&amp;#39;POST&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers&lt;span style="color:#ff6ac1">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5af78e">&amp;#39;Content-Type&amp;#39;&lt;/span>&lt;span style="color:#ff6ac1">:&lt;/span> &lt;span style="color:#5af78e">&amp;#39;application/json&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> body&lt;span style="color:#ff6ac1">:&lt;/span> JSON.stringify({ text, key }),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">const&lt;/span> data &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff6ac1">await&lt;/span> response.json();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> displayResult(data.encryptedText, &lt;span style="color:#5af78e">&amp;#39;encryptionResult&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">async&lt;/span> &lt;span style="color:#ff5c57">function&lt;/span> decrypt() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">const&lt;/span> encryptedText &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff5c57">document&lt;/span>.getElementById(&lt;span style="color:#5af78e">&amp;#39;encryptedText&amp;#39;&lt;/span>).value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">const&lt;/span> key &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff5c57">document&lt;/span>.getElementById(&lt;span style="color:#5af78e">&amp;#39;decryptionKey&amp;#39;&lt;/span>).value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">const&lt;/span> response &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff6ac1">await&lt;/span> fetch(&lt;span style="color:#5af78e">&amp;#39;http://localhost:3000/decrypt&amp;#39;&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> method&lt;span style="color:#ff6ac1">:&lt;/span> &lt;span style="color:#5af78e">&amp;#39;POST&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers&lt;span style="color:#ff6ac1">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5af78e">&amp;#39;Content-Type&amp;#39;&lt;/span>&lt;span style="color:#ff6ac1">:&lt;/span> &lt;span style="color:#5af78e">&amp;#39;application/json&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> body&lt;span style="color:#ff6ac1">:&lt;/span> JSON.stringify({ encryptedText, key }),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">const&lt;/span> data &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff6ac1">await&lt;/span> response.json();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> displayResult(data.decryptedText, &lt;span style="color:#5af78e">&amp;#39;decryptionResult&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff5c57">function&lt;/span> displayResult(result, resultContainerId) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">const&lt;/span> resultDiv &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#ff5c57">document&lt;/span>.getElementById(resultContainerId);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resultDiv.innerHTML &lt;span style="color:#ff6ac1">=&lt;/span> &lt;span style="color:#5af78e">`&amp;lt;p&amp;gt;&lt;/span>&lt;span style="color:#5af78e">${&lt;/span>result&lt;span style="color:#5af78e">}&lt;/span>&lt;span style="color:#5af78e">&amp;lt;/p&amp;gt;`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#ff6ac1">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff6ac1">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#ff6ac1">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can run the &lt;code>app.js&lt;/code> with &lt;code>node&lt;/code> by simply keeping both app.js and index.html files in the same directory and running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ node app.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="im-going-in" >
&lt;div>
&lt;a href="#im-going-in">
##
&lt;/a>
I&amp;rsquo;m going in!
&lt;/div>
&lt;/h3>
&lt;p>Now it was time to dig further. I intercepted a simple login response from the server which gave me tons of information.
&lt;img src="https://raw.githubusercontent.com/ArkaprabhaChakraborty/ArkaprabhaChakraborty.github.io/refs/heads/main/assets/Client-side-HTTP-Encryption/Decrypted%20messages.png" alt="image">
I got access to multiple keys like partner activation key, private and public keys but nothing much &lt;em>damaging&lt;/em>.&lt;/p>
&lt;p>Next I tried to upload a file. Upon inspection of the proxy history I saw two POST requests being made. First one had a shorter encrypted body than the second. This was an obvious giveaway that the second one was uploading the file content, but then what was the first one? I decided to decrypt the response for the first request in the chain aaaannnnnd&amp;hellip;&amp;hellip;&amp;hellip;
&lt;img src="https://raw.githubusercontent.com/ArkaprabhaChakraborty/ArkaprabhaChakraborty.github.io/refs/heads/main/assets/Client-side-HTTP-Encryption/AWS%20Bucket%20keys%20leak%20Credential.png" alt="image">&lt;/p>
&lt;p>Kaboom! AWS Secret Keys! Now that&amp;rsquo;s some serious &lt;em>damage&lt;/em>! I quickly set up the aws cli and fetched everything from the buckets.
&lt;img src="https://raw.githubusercontent.com/ArkaprabhaChakraborty/ArkaprabhaChakraborty.github.io/refs/heads/main/assets/Client-side-HTTP-Encryption/AWS%20Bucket%20keys%20leak%20Credential%20configuration.png" alt="image">
&lt;img src="https://raw.githubusercontent.com/ArkaprabhaChakraborty/ArkaprabhaChakraborty.github.io/refs/heads/main/assets/Client-side-HTTP-Encryption/AWS%20Bucket%20info%20disclosure.png" alt="image">&lt;/p>
&lt;p>I could have gone further but like most pentest engagements, I had limited time so I had to stop here. Also for the organization, this was enough evidence of compromise.&lt;/p>
&lt;h2 id="what-could-have-been-done-better" >
&lt;div>
&lt;a href="#what-could-have-been-done-better">
#
&lt;/a>
What could have been done better?
&lt;/div>
&lt;/h2>
&lt;ol>
&lt;li>Having application layer encryption or similar &amp;ldquo;maskings&amp;rdquo; aren&amp;rsquo;t always enough for shit designs. It&amp;rsquo;s important to learn and study secure system design (doesn&amp;rsquo;t matter whether you are a developer, software engineer or security engineer).&lt;/li>
&lt;li>Shortcut implementation of complicated security techniques often lead to more disasters. Later in this case, the organization had actually implemented rotational IV and secret keys which could be fetched by the frontend, provided if a specific nonce attribute matched (kinda like Anti-CSRF tokens you can say).&lt;/li>
&lt;li>Multi-platform -&amp;gt; At least &amp;ldquo;semi-multi&amp;rdquo; backend. :)&lt;/li>
&lt;/ol></description></item><item><title>Setup a lovely little portfolio with hugo</title><link>/blog/portfolio_with_hugo/</link><pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate><author>arkaprabhachakraborty2001@gmail.com (Arkaprabha Chakraborty)</author><guid>/blog/portfolio_with_hugo/</guid><description>&lt;p>Hugo is an amazing tool. It&amp;rsquo;s a powerful static site generator that can be used to create a beautiful websites. Hugo, is world&amp;rsquo;s fastest static website engine. What I like about Hugo is it&amp;rsquo;s speed and flexibility.&lt;/p>
&lt;p>For my blog I can just use some simple Markdown files, and Hugo build the site for me. This helps me to create a blog that is easy to manage. For starters I followed the &lt;a href="https://gohugo.io/getting-started/quick-start/">Hugo quick start tutorial&lt;/a> to setup a my portfolio website.&lt;/p>
&lt;p>To start with hugo you need to install go. You can download the latest version of go from this &lt;a href="https://go.dev/dl/">link&lt;/a>. After that follow the instructions on go website and install it [there is no point to write about how to install go here].&lt;/p>
&lt;p>After installing go, you can install hugo. I have built hugo from source and you can do the same by running the following commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir &lt;span style="color:#ff5c57">$HOME&lt;/span>/src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">cd&lt;/span> &lt;span style="color:#ff5c57">$HOME&lt;/span>/src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone https://github.com/gohugoio/hugo.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">cd&lt;/span> hugo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you ever wanna &amp;ldquo;find&amp;rdquo; Hugo, you can find it whithin the src folder in your HOME directory, provided you followed the commands given above.&lt;/p>
&lt;p>Now you can setup your special github repository, having the name &lt;code>&amp;lt;Your Username&amp;gt;.github.io&lt;/code>, clone the repo and setup a hugo site using the following commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff5c57">cd&lt;/span> /path/to/&amp;lt;Your Username&amp;gt;.github.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo new site .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This initiates a new site in the current directory. Now you can use any theme to decorate your site and start writing your content. I&amp;rsquo;ll use archie theme for this tutorial. Credits &lt;a href="https://github.com/athul">Athul Cyriac Ajay&lt;/a>.
What I did was copy all of content archie theme&amp;rsquo;s layouts directory to my Hugo site&amp;rsquo;s layouts directory, all content from archie&amp;rsquo;s assets to my site&amp;rsquo;s assets dircetory and all the static files from archie&amp;rsquo;s static directory to my site&amp;rsquo;s static directory. Simple :)&lt;/p>
&lt;p>For blogs everything goes into the cThe &lt;code>publish_dir&lt;/code> is the directory that you want to deploy.ontent folder. For example, if I want to create a blog called &amp;ldquo;My first blog&amp;rdquo; I can create a file called &lt;code>myfirstblog.md&lt;/code> in the content folder. It&amp;rsquo;s not necessary that the file name ends with &lt;code>.md&lt;/code> but I used an md :).&lt;/p>
&lt;p>I have two sections for my portfolio, blog and posts. These are some default directories auto-parsed by Hugo. I did this by adding the follwing to my setup.toml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[[menu.main]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>name = &lt;span style="color:#5af78e">&amp;#34;Blogs&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>url = &lt;span style="color:#5af78e">&amp;#34;/blog&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>weight = &lt;span style="color:#ff9f43">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[menu.main]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>name = &lt;span style="color:#5af78e">&amp;#34;Projects&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>url = &lt;span style="color:#5af78e">&amp;#34;/posts&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>weight = &lt;span style="color:#ff9f43">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since I have two sections I need an &lt;code>_index.md&lt;/code> file in each of them. For more info see the content sections in Hugo &lt;a href="https://gohugo.io/content-management/sections/">here&lt;/a>.&lt;/p>
&lt;p>We are more or less set. Yaay!
Now to publish your portfolio with github pages, you need to set up github actions. If you wanna manually publish your site, you can do that too. You can do that using the following commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will start the build process. It will create a public directory called &lt;code>public&lt;/code> in the current directory. This will contain your static site. You can copy the contents of this directory to your github pages branch. If you are going for this &amp;ldquo;easy&amp;rdquo; way trust me won&amp;rsquo;t be easy for you in near future as updating your site would be difficult.&lt;/p>
&lt;p>This is why I recommend you to use github actions. It&amp;rsquo;s a simple and easy way to publish your site. Mainly we will be following the Hugo &lt;a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">docs&lt;/a> again.&lt;/p>
&lt;p>To start with github actions you need to create a .github/ workflow directory from your repository root ie. your protfolio websites&amp;rsquo;s repository root. This directory will contain all the files that are required to run github actions. Now create a file named &lt;code>gh-pages.yml&lt;/code> in this directory.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">name&lt;/span>: GitHub Pages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">push&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">branches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - main &lt;span style="color:#78787e"># Set a branch to deploy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">pull_request&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">runs-on&lt;/span>: ubuntu-20.04
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">concurrency&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">group&lt;/span>: ${{ github.workflow }}-${{ github.ref }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ff6ac1">uses&lt;/span>: actions/checkout@v3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ff6ac1">name&lt;/span>: Setup Hugo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">uses&lt;/span>: peaceiris/actions-hugo@v2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">hugo-version&lt;/span>: &lt;span style="color:#5af78e">&amp;#39;0.91.2&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e"># extended: true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ff6ac1">name&lt;/span>: Build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">run&lt;/span>: hugo --minify
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ff6ac1">name&lt;/span>: Deploy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">uses&lt;/span>: peaceiris/actions-gh-pages@v3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span>: ${{ github.ref == &amp;#39;refs/heads/main&amp;#39; }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">github_token&lt;/span>: ${{ secrets.GITHUB_TOKEN }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">publish_dir&lt;/span>: ./public
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alrighty then! You are ready to go.&lt;/p>
&lt;h1 id="wait-wait-wait" >
&lt;div>
&lt;a href="#wait-wait-wait">
##
&lt;/a>
&lt;em>WAIT WAIT WAIT!!!!&lt;/em>
&lt;/div>
&lt;/h1>
&lt;p>You don&amp;rsquo;t know what the hell is actually happening in the gh-pages.yml file! Never trust blogs blindly :). Who knows what malicious intent the person writing the blog has :P.&lt;/p>
&lt;p>Let&amp;rsquo;s take you line by line through the yaml file.
For the first part&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">name&lt;/span>: GitHub Pages
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is the workflow name. You can set to anything you want :). Really :).&lt;/p>
&lt;p>The second section deals with the branches and &amp;ldquo;actions&amp;rdquo;.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">push&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">branches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - main &lt;span style="color:#78787e"># Set a branch to deploy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">pull_request&lt;/span>:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is the &amp;ldquo;on&amp;rdquo; section. Here you can set the branches that you want to deploy. You can set multiple branches. I have chosen the main branch because I mostly don&amp;rsquo;t work on main. I create to new branch to make changes and then merge them to main :) &amp;ldquo;A GOOD practice&amp;rdquo; :)&lt;/p>
&lt;p>So whenever there is &amp;ldquo;push&amp;rdquo; to main branch, the deploy will be triggered. Now its not a good practice to run deployments directly, but it&amp;rsquo;s aa blogpost site :), so I didn&amp;rsquo;t wanna overcomplicate things.&lt;/p>
&lt;p>Now comes the jobs section. This is where you can set the jobs. You can set multiple jobs. I have only one job which is deploy job.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff6ac1">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">runs-on&lt;/span>: ubuntu-20.04
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">concurrency&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">group&lt;/span>: ${{ github.workflow }}-${{ github.ref }}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So the delpymnet runs on ubuntu-20.04. This is the OS that I have in my local setup too. You can set to anything you want. Then I have added a job level concurrency. This will allow other jobs in the workflow to proceed even if the concurrent job is &lt;code>pending&lt;/code>.&lt;/p>
&lt;p>The next section deals with the steps that are followed by the job. At first I create a local copy/snapshot of the current main branch using the &lt;a href="https://github.com/actions/checkout">checkout&lt;/a> action. This action checks-out your repository under &lt;code>$GITHUB_WORKSPACE&lt;/code>, so your workflow can access it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ff6ac1">uses&lt;/span>: actions/checkout@v3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next we run a Setup Hugo action. This action will install Hugo and set up the hugo environment. Here I&amp;rsquo;m using the older Hugo version. You can set it whatever you want. For this we use the &lt;a href="https://github.com/peaceiris/actions-hugo">actions-hugo&lt;/a>. Kudos to &lt;a href="https://github.com/peaceiris">peaceiris&lt;/a> for his/her/their awesome work.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ff6ac1">name&lt;/span>: Setup Hugo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">uses&lt;/span>: peaceiris/actions-hugo@v2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">hugo-version&lt;/span>: &lt;span style="color:#5af78e">&amp;#39;0.91.2&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#78787e"># extended: true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next we run our Build action. This action will build the minified static site. I have chosen minify, you can choose not to opt for it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ff6ac1">name&lt;/span>: Build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">run&lt;/span>: hugo --minify
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next we run our Deploy action. This action will deploy the site to GitHub Pages. Here I&amp;rsquo;m using the &lt;a href="https://github.com/peaceiris/actions-gh-pages">actions-gh-pages&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ff6ac1">name&lt;/span>: Deploy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">uses&lt;/span>: peaceiris/actions-gh-pages@v3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">if&lt;/span>: ${{ github.ref == &amp;#39;refs/heads/main&amp;#39; }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">github_token&lt;/span>: ${{ secrets.GITHUB_TOKEN }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff6ac1">publish_dir&lt;/span>: ./public
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>GITHUB_TOKEN&lt;/code> is a unique token that GitHub automatically creates a unique GITHUB_TOKEN secret to use in your workflow. You can use the GITHUB_TOKEN to authenticate in a workflow run. When you enable GitHub Actions, GitHub installs a GitHub App on your repository. The GITHUB_TOKEN secret is a GitHub App installation access token. You can use the installation access token to authenticate on behalf of the GitHub App installed on your repository.
For more info see the &lt;a href="https://docs.github.com/en/actions/security-guides/automatic-token-authentication">automatic token authentication&lt;/a>.&lt;/p>
&lt;p>So in this section we take the &lt;code>public&lt;/code> directory and deploy it to GitHub Pages. After that we trigger github pages deployment.&lt;/p>
&lt;p>Yep that&amp;rsquo;s it :). Please note that you have to change github pages default branch to gh-pages after your first push. If you enjoyed it then do follow me on twitter and on github :P.&lt;/p></description></item></channel></rss>